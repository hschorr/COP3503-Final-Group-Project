//
//  Customer.h
//  ATM
//

#ifndef Header_h
#define Header_h

#include <string>
#include <iostream>


using namespace std;
int userInputNumber();

//Customer class: the customer class is used to create the Customer objects that
//represent the customers using the ATM service. It stores the information wach
//Customer is required to have, including the customers name, address, dob (date of
//birth), PIN, and balance (initial balance of the account). This class also includes
//all of the accessor and mutator methods for each variable.
class Customer {
	friend class ATM;

private:
	//user information
	string name;
	string address;
	long cardNumber;
	int PIN;
	int balance;

public:
	Customer(string name, string address, long cardNumber, double startingBalance, int PIN) {

		//initializes customer
		this->name = name;
		this->address = address;
		this->cardNumber = cardNumber;
		this->balance = (int)(startingBalance * 100);
		this->PIN = PIN;
	}

	//changePIN: this method allows the user to change the PIN number that they stored
	//to access their account. It calls the comparePIN method on the entered PIN to test
	//if the user entered their correct PIN. If the user entered the correct PIN, it will ask
	//the user to input their new desired PIN and to re-enter the new PIN for accuracy. If the user
	//enters the same number for their new PIN, the new PIN is saved as the PIN for that Customer.
	//If the new PINs are different, the user is prompted to try again.
	bool changePIN() {
		int enteredPIN = -1;

		//allows user 3 tries to enter correct PIN
		for (int i = 0; i < 3; i++) {
			cout << "Enter your current PIN (enter 0 to cancel): ";
			enteredPIN = userInputNumber();

			//if user enters correct PIN continues
			if (comparePIN(enteredPIN)) {

				//3 tries to change PIN
				for (int j = 0; j < 3; j++) {

					//accepts 2 user inputed PIN's to make sure new PIN is desired PIN
					cout << "Please enter new PIN: ";
					enteredPIN = userInputNumber();

					//cancels process if user enters 0
					if (enteredPIN == 0) {
						cout << "Process canceled" << endl;
						return false;
					}
					int newPIN;
					cout << "Please re-enter new PIN: ";
					newPIN = userInputNumber();

					//if 2 entered PIN's are same, set new PIN
					if (newPIN == enteredPIN) {
						this->PIN = newPIN;
						cout << "Your PIN is now: " << newPIN << endl;
						return true;
					}

					cout << "Entered PINS do not match. You have " << 2 - j << " attempts remaining." << endl;
				}

				cout << "Exiting current process." << endl;
				return false;
			}

			else {
				cout << "Incorrect PIN. You have " << 2 - i << " attempts remaining." << endl;
			}

		}

		cout << "Exiting current process." << endl;
		return false;
	}

	//comparePIN: this method takes in a PIN number and compares it to the PIN number of
	//that Customer object. If the PINs are the same it returns true, if they are different
	//it returns false
	bool comparePIN(int PIN) {
		if (this->PIN == PIN) {
			return true;
		}
		return false;
	}

	//compareCardNumber: this method takes in a card number and compares it to the
	//cardNumber variable from that Customer object. If the entered card number is the
	//same as cardNumber, the method returns true. If the values are different, it
	// returns false
	bool compareCardNumber(long cardNumber) {
		if (this->cardNumber == cardNumber) {
			return true;
		}
		return false;
	}

	//makeDeposit: this method takes in the double value that the user wants to
	//deposit and adds it to the current balance of the Customer object.
	bool makeDeposit(double x) {
		this->balance += (int)(x * 100);
		return true;
	}

	//makeWithdrawl: this method takes in the double value that the user wants to
	//withdrawal fro their account and subtracts it from the current balance of the
	//Customer object
	bool makeWithdrawal(double x) {
		int withdrawalAmount = (int)(x * 100);
		//checks to make sure user has sufficient funds to make a withdrawal
		if (this->balance >= withdrawalAmount) {
			this->balance -= withdrawalAmount;
			return true;
		}

		cout << "Insufficient funds." << endl;
		return false;
	}

	//getBalance: this method gets the balance variable from the Customer object
	//and prints it out.
	double getBalance() {
		cout << "Your current balance is: " << ((double) this->balance) / 100 << endl;
		return this->balance;
	}

	//compareTo: this method takes in a Customer object x and compares all of the values
	//stored in the customer being tested to the customer x. If all of the values are the
	//same, it returns true to show that the customers are the same. If not all of the values
	//are the same, it returns false
	bool compareTo(Customer x) {
		//compares customer to input customer to see if they are the same
		if (name == x.name && address == x.address && balance == x.balance && PIN == x.PIN && cardNumber == x.cardNumber) {
			return true;
		}
		return false;
	}

}; //End of the customer class

   //userInputNumber: this method checks to see if the number entered by the user is
   //valid
   
int userInputNumber() {
	//gets number from user input
	double hold;
	int size;

	//accepts input
	std::cin >> hold;

	//erases any string
	std::cin.clear();
	std::cin.ignore(1000, '\n');

	//checks if user entered a decimal
	if (hold != (int)hold) {
		printf("You entered a decimal...\n");
		return -1;
	}

	size = (int)hold;
	return size;
}


#endif /* Header_h */
